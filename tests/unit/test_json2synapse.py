import os
import sys
import requests
import json
import pandas
import synapseclient
from nose.tools import assert_equals
from pandas.util.testing import assert_frame_equal

syn = synapseclient.login()

#TODO: remove global vars after code has been moved to synAnnotationUtils
tableSynId = "syn10242922"

# get and load the list of json files from data folder (given the api endpoint url - ref master - latest vesion)
# then construct a dictionary of module names and its associated raw data github url endpoints.
req = requests.get(
    'https://api.github.com/repos/Sage-Bionetworks/synapseAnnotations/contents/synapseAnnotations/data/?ref=master')
file_list = json.loads(req.content)
names = {os.path.splitext(x['name'])[0]: x['download_url'] for x in file_list}

currentTable = syn.tableQuery("SELECT * FROM %s" % tableSynId)
currentTable = currentTable.asDataFrame()


def check_keys():
    """
    For each annotation module, compares the length of annotation keys of json files on github with the current melted
    annotation synapse table keys generated by json2synapse.py

    :return: None or assert_equals Error message
    """
    for module, path in names.iteritems():
        table_key_set = set(currentTable[currentTable['module'] == module].key.unique())
        json_record = pandas.read_json(path)
        json_key_set = set(json_record['name'])
        # print("json_key_set", len(json_key_set), json_key_set)
        # print("table_key_set", len(table_key_set), table_key_set)

        assert_equals(len(json_key_set), len(table_key_set), "module name: %s synapseAnnotations github repo keys "
                                                             "length %s don't match synapse table %s length" % (
                                                              module, len(json_key_set), len(table_key_set)))
